services:
  read:
    image: grafana/loki:2.8.3
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL","wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      innocentudo:
        aliases:
          - loki

  write:
    image: grafana/loki:2.8.3
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.8.3
    volumes:
      - ../observability/promtail/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service
#
#
#  minio:
#    image: minio/minio
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        mkdir -p /data/loki-data && \
#        mkdir -p /data/loki-ruler && \
#        minio server /data
#    environment:
#      - MINIO_ROOT_USER=loki
#      - MINIO_ROOT_PASSWORD=supersecret
#      - MINIO_PROMETHEUS_AUTH_TYPE=public
#      - MINIO_UPDATE=off
#    ports:
#      - 9000
#    volumes:
#      - ./.data/minio:/data
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#      interval: 15s
#      timeout: 20s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#  grafana:
#    image: grafana/grafana:latest
#    environment:
#      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#    depends_on:
#      - gateway
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        /run.sh
#    ports:
#      - "3000:3000"
#    volumes:
#      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service
#
#
#  gateway:
#    image: nginx:latest
#    depends_on:
#      - read
#      - write
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        cat <<EOF > /etc/nginx/nginx.conf
#        user  nginx;
#        worker_processes  5;  ## Default: 1
#
#        events {
#          worker_connections   1000;
#        }
#
#        http {
#          resolver 127.0.0.11;
#
#          server {
#            listen             3100;
#
#            location = / {
#              return 200 'OK';
#              auth_basic off;
#            }
#
#            location = /api/prom/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /api/prom/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /api/prom/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /loki/api/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#          }
#        }
#        EOF
#        /docker-entrypoint.sh nginx -g "daemon off;"
#    ports:
#      - "3100:3100"
#    healthcheck:
#      test: [ "CMD", "service", "nginx", "status" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    extends:
#      file: common-config.yml
#      service: network-deploy-service

  configserver:
    image: "innocentudo/configserver:s11"
    container_name: configserver_ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config


  eurekaserver:
    image: "innocentudo/eurekaserver:s11"
    container_name: eurekaserver_ms
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  accounts:
    image: "innocentudo/accounts:s11"
    container_name: account_ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "accounts"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loan:
    image: "innocentudo/loan:s11"
    container_name: loan_ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "loan"
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  card:
    image: "innocentudo/card:s11"
    container_name: card_ms
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "card"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: "innocentudo/gatewayserver:s11"
    container_name: gatewayserver_ms
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      loan:
        condition: service_healthy
      card:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  innocentudo:
    driver: "bridge"